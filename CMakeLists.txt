cmake_minimum_required(VERSION 3.22)

#
# This file is generated only once,
# and is not re-generated if converter is called multiple times.
#
# User is free to modify the file as much as necessary
#

# Setup compiler settings
set(CMAKE_C_STANDARD 11)                
set(CMAKE_C_STANDARD_REQUIRED ON)       # Fail build if C11 is not available in the compiler.
set(CMAKE_C_EXTENSIONS ON)              # Allow compiler-specific extensions

# Define the build type
if(NOT CMAKE_BUILD_TYPE)            
    set(CMAKE_BUILD_TYPE "Debug")
endif()

# Configure project
project(template
    DESCRIPTION "This is a template"
    LANGUAGES C ASM
)

# Include toolchain file
include("./gcc-arm-none-eabi.cmake")

# Enable compile command to ease indexing with e.g. clangd
set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)

message("Build type: " ${CMAKE_BUILD_TYPE})

# Create an executable object type
add_executable(${CMAKE_PROJECT_NAME})

# Add STM32CubeMX generated sources
#add_subdirectory(Drivers/CMSIS)

# Link directories setup
target_link_directories(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user defined library search paths
)

# Add sources to executable
target_sources(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user sources here
    Src/main.c
    Src/led.c
    startup_stm32g0b1retx.s
)

# Add include paths
target_include_directories(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user defined include paths
    Drivers/CMSIS/Device
    Drivers/CMSIS/Include
    Inc
)

# Add project symbols (macros)
target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE
    # Add user defined symbols
)

# Add linked libraries
target_link_libraries(${CMAKE_PROJECT_NAME}
    #Drivers

    # Add user defined libraries
)

